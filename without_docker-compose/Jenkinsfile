pipeline {
    agent any

    stages {
        stage('git clone') {
            steps {
                git branch: 'master', url: 'https://github.com/sachetx21/two-tier-flask-app.git'
                echo 'git clone successfull'
            }
        }
        stage('docker build') {
            steps {
            dir('.') {
                sh 'pwd'
                sh 'docker build . -t "two-tier-flask-image"'
                }
            }
        }
        stage('ignore step') {
            steps {
                    catchError() {
                        sh 'docker kill two-tier-flask two-tier-mysql'
                        sh 'docker network rm two-tier-network'
                        sh 'docker system prune -f'
                    }
            }
        }    
        stage('docker run') {
            steps {
                sh 'docker network create two-tier-network'
                sh 'docker run --rm -d --name two-tier-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_USER=admin  -e MYSQL_PASSWORD=admin -e MYSQL_DATABASE=mydb -v ./message.sql:/docker-entrypoint-initdb.d/message.sql -v go1234:/var/lib/mysql --network=two-tier-network mysql:5.7'
                sh 'docker run --rm -d --name two-tier-flask -p 5000:5000 -e MYSQL_HOST=two-tier-mysql -e MYSQL_USER=admin  -e MYSQL_PASSWORD=admin -e MYSQL_DB=mydb --network=two-tier-network two-tier-flask-image'
            }
        }
        stage("push"){
            steps{
                withCredentials([usernamePassword(credentialsId:"dockerHub",passwordVariable:"dockerHubPass",usernameVariable:"dockerHubUser")]){
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
                sh "docker tag two-tier-flask-image:latest ${env.dockerHubUser}/two-tier-flask-image:latest"
                sh "docker push ${env.dockerHubUser}/two-tier-flask-image:latest"
                echo 'image push ho gaya'
                }
            }
        }		
	}
}
